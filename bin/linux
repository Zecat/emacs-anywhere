#!/bin/bash

EA_WINDOW=$( xdotool getactivewindow )

EA_APP_NAME=$( xprop -id $EA_WINDOW WM_CLASS | grep -oE '[^ ]+$' )
EA_WINDOW_TITLE=$( xprop -id $EA_WINDOW _NET_WM_NAME | cut -d" " -f3- )
EA_TGEO=$( xwininfo -id $EA_WINDOW |\
              grep 'Absolute\|Relative\|Width:\|Height:' |\
              grep -oE '[^ ]+$' )
EA_GEO=($EA_TGEO)

export EA_APP_NAME
export EA_WINDOW_TITLE
if [ "${EA_GEO[0]}" = "${EA_GEO[2]}" ]; then
    export EA_X="${EA_GEO[0]}"
else
    export EA_X=$(expr "${EA_GEO[0]}" - "${EA_GEO[2]}")
fi
if [ "${EA_GEO[1]}" = "${EA_GEO[3]}" ]; then
    export EA_Y="${EA_GEO[1]}"
else
    export EA_Y=$(expr "${EA_GEO[1]}" - "${EA_GEO[3]}")
fi
export EA_WIDTH="${EA_GEO[4]}"
export EA_HEIGHT="${EA_GEO[5]}"

# TODO find alternative for wayland, try wl-clipboard, ydotool, wtype https://dcz_self.gitlab.io/posts/input_method/

CLIPBOARD_BACKUP=$( xclip -o -sel clipboard )

# Clear the clipboard
echo "" | xclip -sel c

# TODO it's weird that EA_APP_NAME includes the quotes
if [ "${EA_APP_NAME}" = "\"firefox\"" ]; then
    # Note: I personally bound emacs anywhere to 'Alt+$' shortcut. So when the script runs, 'Alt' is still down

    # Pretend to release the 'alt' key with --clearmodifiers, then select the text and copy to clipboard
    xdotool key --clearmodifiers --window $EA_WINDOW ctrl+a ctrl+c
    # Wait a bit for the clipboard to record
    sleep 0.1
else # HACK --clearmodifers and --window seems problematic with some app eg. libreoffice
    # Note: I bound emacs anywhere to 'Alt+$' shortcut. So when the script runs, 'Alt' is still down

    # Pretend to release the 'alt' key then select the text and copy to clipboard
    xdotool keyup alt key ctrl+a ctrl+c

    # Wait a bit, otherwise the focus is not given to the newly create emacs frame
    # TODO instead, programmatically ensure focus to the new frame
    sleep 2
fi

EA_INPUT_VALUE=$( xclip -o -sel clipboard )
export EA_INPUT_VALUE

# Restore clipboard
echo $CLIPBOARD_BACKUP | xclip -sel c

$HOME/.emacs_anywhere/bin/emacstask

if [ ! -f /tmp/eaenv ]; then
    exit 1
fi
. /tmp/eaenv
rm /tmp/eaenv

if [ "$EA_ABORT" = true ]; then
    exit 0;
fi

if [ "$EA_SHOULD_COPY" = true ]; then
    xclip -selection clipboard /tmp/eaclipboard
    rm /tmp/eaclipboard
fi

xdotool windowactivate --sync $EA_WINDOW

if [ "$EA_SHOULD_PASTE" = true ]; then
    xdotool key --clearmodifiers Shift+Insert
fi

# Wait a bit for the copy to apply
# TODO Check if it is problematic for very large copy
sleep 1

# Restore clipboard
echo $CLIPBOARD_BACKUP | xclip -sel c
